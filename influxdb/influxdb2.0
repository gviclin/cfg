docker inspect influxdb

sudo docker exec -it server_grafana_1 bash

docker run -d --name=influxdb2 \
 -p 8086:8086 \
 -v  /home/gv/python/influxdb/data:/var/lib/influxdb2 \
  -v  /home/gv/python/influxdb/import:/etc/influxdb2/import \
      influxdb:latest
      
       from(bucket: "db1")
  |> range(start: -3mo,stop:now())
  |> filter(fn: (r) => r["_measurement"] == "essence")
  |> filter(fn: (r) => r["_field"] == "Distance totale")
  |> toFloat()
  |> group(columns: ["_measurement","_field"])
  |> sort(columns: ["_time"],desc:false)
  |> keep(columns: ["_field","_value","_time"])
  |> interpolate.linear(every: 1mo)
  |> keep(columns: ["_field","_value","_time"])
 // |> map(fn: (r) => ({r with exampleCol: time(v: r.exampleCol)}))
 |> map( fn: (r) => ({_time:r._time,_time2: date.truncate(t:r._time, unit: 1mo), _field:r._field, _value:r._value}))
 //    |> aggregateWindow(every: 1mo, fn: min, createEmpty: false)
 //  |> difference()
 // |>  timeShift(duration:-2mo) 
  |> yield(name: "interpolate")
  
 docker exec influxdb influx delete \
  -t=-YdcA_QYuQmbDgQeiNhhlny9MDcXbZ9W0hGSlOTrKWjVpLSLUytaPA_CIxBSzvhcrgkJWGHwkfp32XqpnzAcqQ== \
  -b db1 \
  -o gvi \
  --start 1970-01-01T00:00:00Z \
  --stop $(date +"%Y-%m-%dT%H:%M:%SZ") \
  --predicate '_measurement="essence"'
      
 from(bucket: "db1")
  |> range(start: -15y)
  |> filter(fn: (r) => r["_measurement"] == "essence_test3")
   |> filter(fn: (r) => r["Voiture"] == "5008")
 //|> filter(fn: (r) => r["Lieu"] != "5008") 
 //|> group(columns: ["Lieu"])

  |>  yield()

      
     
curl --request POST \
  http://localhost:8086/api/v2/query?org=gvi  \
  --header 'Authorization: Token OXuwziMkyMoDVFbOgZceTYAgl3b60VC-RgLMDFRGZcsGqUdW9n7aWfpU8Gk1x35r0G-gEfdkiSKO8y4r7K9pZg==' \
  --header 'Accept: application/csv' \
  --header 'Content-type: application/vnd.flux' \
  --data 'from(bucket: "db1")
    |> range(start: -12mo)
    |> filter(fn: (r) => r["_measurement"] == "enedis")
    |> filter(fn: (r) => r["Type de releve"] == "Arrêté quotidien")
    |> filter(fn: (r) => r["_field"] == "kw" )
    |> aggregateWindow(every: 1mo, fn: sum, createEmpty: false)
    |> yield()'
     
from(bucket: "db1")
  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
  |> filter(fn: (r) => r["_measurement"] == "temperature")
  |> filter(fn: (r) => r["entity_id"] == "lumi_lumi_weather_b8f6bb07_temperature") // temperature exterieure nord
//|> filter(fn: (r) => r["entity_id"] == "lumi_lumi_weather_b8f6bb07_temperature" or r["entity_id"] == "lumi_lumi_weather_831f4b05_temperature" or r["entity_id"] == "lumi_lumi_weather_34deb607_temperature")
  |> filter(fn: (r) => r["_field"] == "value" )
  |> aggregateWindow(every: 1d, fn: mean, createEmpty: false)
  |> yield()  

from(bucket: "db1")
  |> range(start: -3mo)
  |> filter(fn: (r) => r["_measurement"] == "enedis")
  |> filter(fn: (r) => r["Type de releve"] == "Arrêté quotidien")
  |> filter(fn: (r) => r["_field"] == "kw" )
 // |> aggregateWindow(every: 1y, fn: sum, createEmpty: false)
  |> window(every: 1mo)
  |> sum()
  |> duplicate(column: "_stop", as: "_time")
  |> window(every: inf)
  |> yield()
  
  // chagemebt heure
from(bucket: "db1")
  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
  |> filter(fn: (r) => r["_measurement"] == "enedis2")
  |> filter(fn: (r) => r["Type de releve"] == "Arrêté quotidien")
  |> filter(fn: (r) => r["_field"] == "index")
    |> toFloat()
  |> map(fn: (r) => ({r with _value: r._value / 1000.0 } ))
   |> yield()
  
  
docker exec influxdb influx write -b example-bucket \
  -t=-YdcA_QYuQmbDgQeiNhhlny9MDcXbZ9W0hGSlOTrKWjVpLSLUytaPA_CIxBSzvhcrgkJWGHwkfp32XqpnzAcqQ== \
  -b db1 \
  -o gvi \
  -f /etc/influxdb2/import/Enedis_Conso_Jour_header.csv \
  -f /etc/influxdb2/import/Enedis_Conso_Jour.csv

  
 docker exec influxdb influx write -b example-bucket \
  -t=-YdcA_QYuQmbDgQeiNhhlny9MDcXbZ9W0hGSlOTrKWjVpLSLUytaPA_CIxBSzvhcrgkJWGHwkfp32XqpnzAcqQ== \
  -b db1 \
  -o gvi \
  -f /etc/influxdb2/import/essence_header.csv \
  -f /etc/influxdb2/import/essence.csv
  
  // MONTH
date.truncate(t: v.timeRangeStop, unit: 1mo)

# YEAR
import "interpolate"  
import "date"

debut = date.truncate(t: v.timeRangeStart, unit: 1y)
fin = date.add(to:date.truncate(t: v.timeRangeStop, unit: 1y),d:2y)

data = from(bucket: "db1")
  |> range(start: debut, stop: fin)
  |> filter(fn: (r) => r["_measurement"] == "essence")
  |> filter(fn: (r) => r["_field"] == "Distance totale")
  |> toFloat()
  |> group(columns: ["_measurement","_field"])
  |> sort(columns: ["_time"],desc:false)
  |> keep(columns: ["_field","_value","_time"])


data1 = data
|>last()
|> map( fn: (r) => ({_time: date.add(to:date.truncate(t:r._time, unit: 1mo),d:1mo), _field:r._field, _value:r._value}))

data2 = data
|>last()
|> map( fn: (r) => ({_time: date.add(to:date.truncate(t:r._time, unit: 1y),d:1y), _field:r._field, _value:r._value}))

result = union(tables: [data, data1, data2])

result 
 |> sort(columns: ["_time"],desc:false)
 |> range(start: debut, stop: fin)
 |> interpolate.linear(every: 1mo)
 |> window(every: 1y)
 |> min()
 |> duplicate(column: "_start", as: "_time")
 |> window(every: inf)
 |> keep(columns: ["_field","_value","_time"])
 |> difference(nonNegative:true)
 |> timeShift(duration:-1y) 
 |> map(fn: (r) => ({r with _time: string(v: date.year(t:r._time))}))
|> yield()

docker exec -it server_grafana_2_1 grafana-cli admin reset-admin-password xx
