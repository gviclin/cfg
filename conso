//Conso quodidienne

div = (x) => x / 1000
from(bucket: "db1")
  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
  |> filter(fn: (r) => r["_measurement"] == "enedis_jour")
  |> filter(fn: (r) => r["Type de releve"] == "Arrêté quotidien")
  |> filter(fn: (r) => r["_field"] == "index" )
 //|> window(every: 1d)
 // |> aggregateWindow(every: 1y, fn: sum, createEmpty: false)
 |>  timeShift(duration:-1d) 
  |> toFloat()
  |> difference() 
  |> map(fn: (r) => ({r with _value: r._value / 1000.0}))
    |> keep(columns: ["_value","_time"])
  |> rename(columns: {_value: "kW"})
  |> yield()
  
  from(bucket: "db1")
  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
  |> filter(fn: (r) => r["_measurement"] == "enedis_jour")
  |> filter(fn: (r) => r["Type de releve"] == "Arrêté quotidien")
  |> filter(fn: (r) => r["_field"] == "index" )
 //|> window(every: 1mo)
 |> aggregateWindow(every: 1mo, fn: sum, createEmpty: false)
// |>  timeShift(duration:-1d) 
  |> toFloat()
 // |> difference() 
  |> map(fn: (r) => ({r with _value: r._value / 1000.0}))
    |> keep(columns: ["_value","_time"])
  |> rename(columns: {_value: "conso du mois"})
  |> yield()
